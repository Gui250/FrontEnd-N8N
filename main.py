import streamlit as st
import requests
import time
from requests.exceptions import ReadTimeout, ConnectionError

# ========== CONFIGURA√á√ïES CORRETAS ==========
# Webhook1 - √önico webhook que vamos usar (Leads)
WEBHOOK_LEADS = "https://projeto01-n8n.peitvn.easypanel.host/webhook/ce723d0d-a280-414f-aec3-85c940f7dc6f"
WORKFLOW_ID = "D2c8LMH4Fq8JT6CQ"
N8N_BASE_URL = "https://projeto01-n8n.peitvn.easypanel.host"

# ========== FUN√á√ïES AUXILIARES ==========
def call_webhook(url, payload=None, timeout=30):
    """Chama o webhook com payload."""
    try:
        response = requests.post(url, json=(payload or {}), timeout=timeout)
        
        # Log da opera√ß√£o
        if "operation_logs" in st.session_state:
            st.session_state["operation_logs"].append({
                "timestamp": time.strftime("%H:%M:%S"),
                "action": "WEBHOOK_CALL",
                "status": response.status_code,
                "response_preview": response.text[:100] if response.text else "No response"
            })
        
        return response
    except Exception as e:
        if "operation_logs" in st.session_state:
            st.session_state["operation_logs"].append({
                "timestamp": time.strftime("%H:%M:%S"),
                "action": "WEBHOOK_ERROR",
                "error": str(e)
            })
        raise e

def test_webhook_connection():
    """Testa a conectividade do webhook."""
    try:
        st.info("üîç Testando conectividade do Webhook1...")
        
        test_payload = {
            "test": True,
            "timestamp": time.time()
        }
        
        response = call_webhook(WEBHOOK_LEADS, test_payload, timeout=15)
        
        st.session_state["operation_logs"].append({
            "timestamp": time.strftime("%H:%M:%S"),
            "action": "CONNECTION_TEST",
            "status": response.status_code,
            "details": f"Teste de conectividade - Status: {response.status_code}"
        })
        
        if response.status_code == 200:
            st.success("‚úÖ Webhook1 est√° funcionando perfeitamente!")
            st.balloons()
            return True
        elif response.status_code == 404:
            st.error("üö® **WEBHOOK N√ÉO REGISTRADO (404)**")
            st.error("‚ùå O workflow n√£o est√° ativo no n8n!")
            show_activation_instructions()
            return False
        else:
            st.error(f"‚ùå Webhook retornou erro: {response.status_code}")
            st.code(response.text[:300] if response.text else "Sem resposta")
            return False
            
    except Exception as e:
        st.error(f"‚ùå Erro ao testar webhook: {e}")
        return False

def show_activation_instructions():
    """Mostra instru√ß√µes detalhadas para ativar o workflow."""
    st.markdown("### üîß INSTRU√á√ïES PARA ATIVAR O WORKFLOW:")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        **üìã PASSO A PASSO:**
        1. **Acesse**: https://projeto01-n8n.peitvn.easypanel.host
        2. **Fa√ßa login** na sua conta n8n
        3. **Encontre o workflow**: "Leads sdr AMAC - FUNCIONANDO copy"
        4. **Abra o workflow** clicando nele
        5. **Ative**: Clique no toggle "Active" (canto superior direito)
        6. **Confirme**: O toggle deve ficar verde
        """)
    
    with col2:
        st.markdown("""
        **‚úÖ COMO SABER SE EST√Å ATIVO:**
        - Toggle "Active" deve estar **verde/ligado**
        - Aparece "Active" ao lado do nome do workflow
        - Webhook fica dispon√≠vel para receber requisi√ß√µes
        
        **üîÑ DEPOIS DE ATIVAR:**
        - Volte aqui e clique "üöÄ INICIAR FLUXO"
        - Deve iniciar o processamento dos leads
        """)
    
    st.warning("‚ö†Ô∏è **IMPORTANTE**: O workflow DEVE estar ativo para o webhook funcionar!")
    
    if st.button("üîÑ TESTAR NOVAMENTE AP√ìS ATIVA√á√ÉO", key="retest"):
        st.rerun()

def iniciar_fluxo():
    """Inicia o fluxo do workflow sem enviar dados espec√≠ficos."""
    try:
        st.session_state["operation_logs"].append({
            "timestamp": time.strftime("%H:%M:%S"),
            "action": "üöÄ INICIANDO_FLUXO",
            "details": "Disparando o workflow para processar dados do Google Sheets"
        })
        
        # Payload m√≠nimo apenas para iniciar o fluxo
        payload = {
            "trigger": "start_workflow",
            "timestamp": time.time(),
            "source": "streamlit_trigger"
        }
        
        # Chamar Webhook1 apenas para iniciar
        response = call_webhook(WEBHOOK_LEADS, payload, timeout=60)
        
        if response.status_code == 200:
            st.session_state["operation_logs"].append({
                "timestamp": time.strftime("%H:%M:%S"),
                "action": "‚úÖ FLUXO_INICIADO",
                "details": f"Fluxo iniciado com sucesso! Status: {response.status_code}"
            })
            return True, "üöÄ Fluxo iniciado! O workflow est√° processando os dados do Google Sheets."
        elif response.status_code == 404:
            st.session_state["operation_logs"].append({
                "timestamp": time.strftime("%H:%M:%S"),
                "action": "‚ùå WORKFLOW_INATIVO",
                "details": "Workflow n√£o est√° ativo - erro 404"
            })
            return False, "WORKFLOW N√ÉO EST√Å ATIVO! Voc√™ precisa ativar o workflow no n8n primeiro."
        else:
            st.session_state["operation_logs"].append({
                "timestamp": time.strftime("%H:%M:%S"),
                "action": "‚ùå ERRO_FLUXO",
                "details": f"Erro {response.status_code}: {response.text[:100]}"
            })
            return False, f"Erro {response.status_code}: {response.text[:200]}"
            
    except Exception as e:
        st.session_state["operation_logs"].append({
            "timestamp": time.strftime("%H:%M:%S"),
            "action": "üö® EXCECAO_FLUXO",
            "details": f"Exce√ß√£o: {str(e)}"
        })
        return False, f"Erro na execu√ß√£o: {e}"

# ========== INICIALIZA√á√ÉO ==========
def init_session_state():
    """Inicializa o estado da sess√£o."""
    if "operation_logs" not in st.session_state:
        st.session_state["operation_logs"] = []

init_session_state()

# ========== INTERFACE PRINCIPAL ==========
st.set_page_config(layout="wide", page_title="Iniciar Fluxo AMAC", page_icon="üöÄ")
st.title("üöÄ Iniciar Fluxo de Leads - AMAC")

# Informa√ß√µes do workflow
st.info(f"üéØ **Workflow ID**: `{WORKFLOW_ID}` | üîó [Abrir no n8n]({N8N_BASE_URL}/workflow/{WORKFLOW_ID})")

# Verifica√ß√£o autom√°tica do status do workflow
def check_workflow_status_display():
    """Verifica e exibe o status do workflow."""
    try:
        test_payload = {"status_check": True}
        response = requests.post(WEBHOOK_LEADS, json=test_payload, timeout=5)
        
        if response.status_code == 200:
            st.success("‚úÖ **WORKFLOW ATIVO** - Pronto para processar leads!")
            return True
        elif response.status_code == 404:
            st.error("üö® **WORKFLOW INATIVO** - Voc√™ precisa ativar o workflow no n8n!")
            st.error("üëÜ **CLIQUE NO LINK ACIMA** para abrir o n8n e ativar o workflow")
            return False
        else:
            st.warning(f"‚ö†Ô∏è **STATUS INCERTO** - Webhook retornou {response.status_code}")
            return False
    except:
        st.warning("‚ö†Ô∏è **N√ÉO FOI POSS√çVEL VERIFICAR** - Teste manualmente abaixo")
        return False

# Verificar status automaticamente
workflow_active = check_workflow_status_display()

# ========== PROBLEMA DA API RESOLVIDO ==========
with st.expander("üîß PROBLEMA DE AUTORIZA√á√ÉO RESOLVIDO", expanded=True):
    st.success("‚úÖ **SOLU√á√ÉO**: Removemos a depend√™ncia da API com erro 401")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        **üö® PROBLEMA IDENTIFICADO:**
        - ‚ùå API Key com erro 401 Unauthorized
        - ‚ùå N√£o conseguia ativar/desativar workflow
        - ‚ùå Funcionalidades bloqueadas pela API
        """)
    
    with col2:
        st.markdown("""
        **‚úÖ SOLU√á√ÉO IMPLEMENTADA:**
        - ‚úÖ **Webhook direto** sem depend√™ncia da API
        - ‚úÖ **Execu√ß√£o imediata** do Webhook1
        - ‚úÖ **Foco apenas no essencial** - processar leads
        """)

# ========== CONTROLE PRINCIPAL ==========
st.markdown("## üéØ Controle do Fluxo de Leads")

col1, col2 = st.columns(2)

with col1:
    st.markdown("### üöÄ Iniciar Fluxo")
    st.info("""
    **Fluxo**: Webhook1 ‚Üí Code ‚Üí Google Sheets ‚Üí If1 ‚Üí Filter ‚Üí Loop ‚Üí Scraping ‚Üí AI ‚Üí Mensagens
    
    **Fun√ß√£o**: Inicia o processamento dos leads que est√£o no Google Sheets
    """)
    
    if st.button("üöÄ INICIAR FLUXO", type="primary", use_container_width=True):
        with st.spinner("Iniciando fluxo..."):
            success, message = iniciar_fluxo()
            if success:
                st.success(f"‚úÖ {message}")
                st.balloons()
            else:
                st.error(f"‚ùå {message}")
                if "N√ÉO EST√Å ATIVO" in message:
                    show_activation_instructions()

with col2:
    st.markdown("### üîç Testar Conectividade")
    st.info("""
    **Teste**: Verifica se o Webhook1 est√° respondendo corretamente
    
    **Resultado**: Status 200 = OK, Status 404 = Workflow inativo
    """)
    
    if st.button("üîç TESTAR WEBHOOK1", type="secondary", use_container_width=True):
        test_webhook_connection()

# ========== INSTRU√á√ïES MANUAIS ==========
st.markdown("## ‚öôÔ∏è Instru√ß√µes para Ativar Manualmente")

with st.expander("üìã Como ativar o workflow no n8n (Manual)", expanded=False):
    st.markdown("""
    **üîß PASSO A PASSO para ativar o workflow:**
    
    1. **Acesse o n8n**: https://projeto01-n8n.peitvn.easypanel.host
    2. **Fa√ßa login** na sua conta
    3. **Abra o workflow**: Clique em "Leads sdr AMAC - FUNCIONANDO copy"
    4. **Ative o workflow**: Clique no toggle "Active" no canto superior direito
    5. **Confirme**: O toggle deve ficar verde/ativo
    
    **‚úÖ Pronto!** O Webhook1 estar√° ativo e funcionando.
    
    **üéØ Depois de ativar manualmente:**
    - Use o bot√£o "üöÄ INICIAR FLUXO" nesta p√°gina
    - O workflow processar√° os leads do Google Sheets automaticamente
    - Acompanhe os logs abaixo para ver o progresso
    """)

# ========== LOGS EM TEMPO REAL ==========
if st.session_state.get("operation_logs"):
    with st.expander("üìã Logs de Opera√ß√µes - Tempo Real", expanded=True):
        st.caption("üîç Acompanhe todas as opera√ß√µes do Webhook1:")
        
        # Mostrar √∫ltimos 10 logs
        recent_logs = st.session_state["operation_logs"][-10:]
        
        for log in recent_logs:
            timestamp = log.get("timestamp", "")
            action = log.get("action", "")
            
            if "SUCCESS" in action:
                st.success(f"‚úÖ {timestamp} - {action}")
                if log.get("details"):
                    st.caption(f"üìã {log['details']}")
            elif "ERROR" in action:
                st.error(f"‚ùå {timestamp} - {action}")
                if log.get("details"):
                    st.caption(f"üö® {log['details']}")
            elif "EXCEPTION" in action:
                st.error(f"üö® {timestamp} - {action}")
                if log.get("details"):
                    st.caption(f"üí• {log['details']}")
            elif "INICIANDO" in action:
                st.info(f"üöÄ {timestamp} - {action}")
                if log.get("details"):
                    st.caption(f"üìã {log['details']}")
            elif "CONNECTION_TEST" in action:
                status = log.get("status", "?")
                if status == 200:
                    st.success(f"‚úÖ {timestamp} - Teste de Conectividade")
                else:
                    st.error(f"‚ùå {timestamp} - Teste de Conectividade")
                if log.get("details"):
                    st.caption(f"üîç {log['details']}")
            elif "WEBHOOK_CALL" in action:
                status = log.get("status", "?")
                if status == 200:
                    st.success(f"üîó {timestamp} - Webhook chamado com sucesso")
                else:
                    st.error(f"üîó {timestamp} - Erro na chamada do webhook")
                st.caption(f"üìä Status: {status}")
            else:
                st.write(f"üìù {timestamp} - {action}")
                if log.get("details"):
                    st.caption(f"‚ÑπÔ∏è {log['details']}")
        
        # Bot√£o para limpar logs
        if st.button("üóëÔ∏è Limpar Logs"):
            st.session_state["operation_logs"] = []
            st.success("üóëÔ∏è Logs limpos!")
            st.rerun()

# ========== INFORMA√á√ïES T√âCNICAS ==========
with st.expander("üîß Informa√ß√µes T√©cnicas", expanded=False):
    st.markdown(f"""
    **üîó Webhook1 URL**: 
    `{WEBHOOK_LEADS}`
    
    **üÜî Workflow ID**: `{WORKFLOW_ID}`
    
    **üåê n8n Base URL**: `{N8N_BASE_URL}`
    
    **üìã Payload de Inicializa√ß√£o**:
    ```json
    {{
      "trigger": "start_workflow",
      "timestamp": 1234567890,
      "source": "streamlit_trigger"
    }}
    ```
    
    **‚ÑπÔ∏è Como funciona**:
    - O webhook apenas **inicia** o fluxo
    - O workflow processa os dados que j√° est√£o no **Google Sheets**
    - N√£o enviamos dados espec√≠ficos, apenas disparamos o processamento
    
    **üéØ Fluxo do Workflow**:
    1. Webhook1 recebe os dados
    2. Code gera n√∫mero aleat√≥rio
    3. Get row(s) in sheet busca dados no Google Sheets
    4. If1 filtra registros com mensagem n√£o vazia
    5. Filter filtra registros v√°lidos
    6. Loop Over Items processa cada empresa
    7. Jina AI faz scraping do site
    8. Message a model gera mensagem com GPT
    9. Envia MSG Texto via WhatsApp
    """)

st.markdown("---")
st.caption("üöÄ Iniciar Fluxo - Vers√£o simplificada que apenas dispara o workflow")